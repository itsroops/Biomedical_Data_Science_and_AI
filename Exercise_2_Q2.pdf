{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Guha Neogi_Avirup_Sheet2_Question2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "CabMGCR9Shug",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        },
        "outputId": "4418d823-6f31-4b7c-8915-f25ae758b295"
      },
      "source": [
        "# Mounting the Google Drive for accessing the Cleveland dataset\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J88ZgkLUSOrm"
      },
      "source": [
        "# Importing the necessary package to read the dataset\n",
        "import pandas as pd\n",
        "\n",
        "# Reading the content of the dataset to a dataframe\n",
        "df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Data Files/processedClevelandData.csv\", sep=\";\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kjzT8KVxko_v"
      },
      "source": [
        "**Answer a)**\n",
        "\n",
        "The following features can be labelled as discrete random variables:\n",
        "\n",
        "1. id - This is because all the values are discrete and finite.\n",
        "\n",
        "2. age, chol, trestbps, thalach - This is because all the values are discrete integers and they belong to the set of countably infinite number of values and by definition, a discrete random variable can map to countably infinite values.\n",
        "\n",
        "3. sex, cp, fbs, resetecg, exang, slope, ca, thal - This is because they are categorical variables which are inherently discrete in nature and are represented by finite discrete numbers. \n",
        "\n",
        "In this dataset, none of the features can be modelled by continous random variables. However, if features like chol, trestbps, thalach had floating point values, then they would certainly be continuous. But in this dataset, they are countably infinite. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4kFXWpwb5xjN"
      },
      "source": [
        "**Answer b)**\n",
        "\n",
        "The following features are numerical:\n",
        "id, age, chol, trestbps, thalach. This is because they contain measurable values. \n",
        "\n",
        "The following features are categorical:\n",
        "sex, cp, fbs, resetecg, exang, slope, ca, thal"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7EDSLnzN-0FL"
      },
      "source": [
        "**Answer c)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_i_K7rLv7SUH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "94c77f8b-eebe-451b-f390-07f5cf7aef99"
      },
      "source": [
        "# Importing relevant package\n",
        "import seaborn as sns\n",
        "\n",
        "# Plotting the univariate distribution of a variable\n",
        "sns.distplot(df[\"exang\"], hist=False);\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LANLklk1-wUX"
      },
      "source": [
        "Hence, it is observed that the 'exang' feature follows a **bimodal distribution** as there are two distinct peaks in the distribution of the data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0aWnv3X3AmTa"
      },
      "source": [
        "**Answer d)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KVI9a5AxAow4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "outputId": "71cdf671-1b9a-4a0b-817c-3b609b47bc72"
      },
      "source": [
        "# Class distribution  of Sex in the dataset\n",
        "k = df.groupby(['Sex','num']).size().to_frame('count').reset_index()\n",
        "print(k)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   Sex  num  count\n",
            "0  0.0    0     72\n",
            "1  0.0    1      9\n",
            "2  0.0    2      7\n",
            "3  0.0    3      7\n",
            "4  0.0    4      2\n",
            "5  1.0    0     92\n",
            "6  1.0    1     46\n",
            "7  1.0    2     29\n",
            "8  1.0    3     28\n",
            "9  1.0    4     11\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9I7s8iqNRuWw"
      },
      "source": [
        "The above data shows gender-wise distribution of data in the target classes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wf19cDPS3XpW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "1d8b2aff-4c9c-4e86-a2e6-bb61034de0d5"
      },
      "source": [
        "# Filtering the dataset with only males and then grouping by cp per class\n",
        "k = df[abs(df.Sex - 1.0) < 1e-10].groupby(['num','cp']).size().to_frame('count').reset_index()\n",
        "print(k)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "    num   cp  count\n",
            "0     0  1.0     12\n",
            "1     0  2.0     25\n",
            "2     0  3.0     34\n",
            "3     0  4.0     21\n",
            "4     1  1.0      5\n",
            "5     1  2.0      5\n",
            "6     1  3.0      9\n",
            "7     1  4.0     27\n",
            "8     2  1.0      1\n",
            "9     2  2.0      1\n",
            "10    2  3.0      3\n",
            "11    2  4.0     24\n",
            "12    3  2.0      1\n",
            "13    3  3.0      4\n",
            "14    3  4.0     23\n",
            "15    4  1.0      1\n",
            "16    4  3.0      1\n",
            "17    4  4.0      9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rNngqS6MR-se"
      },
      "source": [
        "The above data shows the distribution of cp in different classes only for males"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hETifMv1QZHZ"
      },
      "source": [
        "**Answer e)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qnkfa-w5O1jp"
      },
      "source": [
        "def determine_outliers(data):\n",
        "  \"\"\" Finds out outliers in data\n",
        "\n",
        "  This function calcuates the outliers present in the data by computing\n",
        "  the inter-quartile range and determining points lying outside 1.5 times \n",
        "  the inter-quartile range\n",
        "\n",
        "  Arg:\n",
        "      The input feature of the dataset\n",
        "  \n",
        "  Return:\n",
        "      Returns the outlier list\n",
        "\n",
        "  \"\"\"\n",
        "  outliers=[]   # Initialize list of outliers\n",
        "  s1 = sorted(data)     # Sorting the trestbps column\n",
        "  q1, q3= np.percentile(data,[25,75])    # Computing the lower and upeer quartiles\n",
        "  iqr = q3 - q1   # Computing the Inter-quartile range\n",
        "  lower_ext = q1 -(1.5 * iqr)   # Computing the lower extreme\n",
        "  upper_ext = q3 +(1.5 * iqr)   # Computing the upper extreme\n",
        "  \n",
        "  # Check each element of the data whether it falls beyond the lower and upper extremes\n",
        "  for i in data:\n",
        "    if i < lower_ext:\n",
        "      outliers.append(i)\n",
        "    elif i > upper_ext:\n",
        "      outliers.append(i)\n",
        "\n",
        "  return outliers\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z2zltVsGO_y_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "outputId": "a7a861ac-b309-4b25-cdf8-5b4546d1dcc1"
      },
      "source": [
        "# Calling the outlier determining function\n",
        "\n",
        "print(\"The outliers for the trestbps feature are as follows\")\n",
        "print(determine_outliers(df['trestbps']))\n",
        "print(\"\\n\")\n",
        "print(\"The outliers for the thalach feature are as follows\")\n",
        "print(determine_outliers(df['thalach']))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The outliers for the trestbps feature are as follows\n",
            "[172.0, 180.0, 200.0, 174.0, 178.0, 192.0, 180.0, 178.0, 180.0]\n",
            "\n",
            "\n",
            "The outliers for the thalach feature are as follows\n",
            "[71.0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eaU-iKFD6j7y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "d95c4935-0b61-464b-c208-18287b629c70"
      },
      "source": [
        "# Plotting the box plot for trestbps\n",
        "sns.set(style=\"whitegrid\")\n",
        "ax = sns.boxplot(x=df[\"trestbps\"])\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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t6+goMD17NnTYon/2e0zlpWVueeee87l5eVV2xfOMzpXfc7S0lKXkpLiSktLa3xeOF+zt0e3b9++7vDhw84553788Uc3bNgw51x4z1il6v6r7boM5DXr913GQuHixYt68MEHFRUVJUmKiopSy5YtdfHiRTnn/O5LTEwM5bL/E6/Xqw0bNig1NVXSza9BmzZtfPsTExPl9XpVXFys+Pj4UC3zrnzwwQcaN26c2rVrV217Q5oxLy9P8fHxWrlypQ4ePKi4uDi99tpr6t27d63XczhdsxEREXr//ff18ssvKzY2Vh6PR2vXrpVU+z0bDjPeev/Vdl0G8prlB2khtmjRIsXGxmrixImhXkpAHT16VNnZ2Xr++edDvZSgqqysVF5enrp166bNmzdr9uzZmjlzpkpLS0O9tICpqKjQxx9/rFWrVmnXrl1avXq1Zs2aJY/HE+ql/WehuP/q1ZNu69atdfnyZVVWVioqKkqVlZW6cuWKWrduLeec333hatmyZTp79qzWrFnjezei1q1bKz8/3/c5hYWFioyMDLsnwEOHDiknJ0dDhgyRJF26dElTpkzRO++802BmlG5+v6KjozVmzBhJUo8ePZSQkKDTp0+rTZs2DeKaPX78uK5cuaKUlBRJUkpKipo0aaKcnBy1bds2bGe8/f6r7boM5DVbr550mzdvrq5du2rbtm2SpG3btqlr165KTEysdV84WrFihbKzs5WZmamYmBjf9u7du+v69es6fPiwJCkrK0sjRowI1TLv2rRp0/TDDz9o586d2rlzp1q1aqX169drwIABDWZG6eZfM/v166d9+/ZJuvmT/IKCAj300EMN5ppt1aqVLl26pNzcXElSTk6OCgoK1KFDh7Cd8U73X23XZSCv2ZC9tePixYu1fft2/fnnn0pISFB8fLy++uor5eTkKCMjQ1evXlWzZs20bNkyderUSZJq3Vdf3WnO999/X2PGjNHDDz+sxo0bS5LatWunzMxMSdJPP/2kBQsWqKysTG3bttXy5cvVokWLUI5RK3/fy1ulpqZqzZo1SkpKkhR+M0r+58zLy9Mbb7yh4uJiRUdHa9asWXryySclhd8162/GrVu3at26db731n711VeVlpYmKfxmPHnypN/7r7brMlDXLO+nCwCG6tXLCwDQ0BFdADBEdAHAENEFAENEFwAMEV00CKmpqdq/f3+olwH8I6KLoAlWCDMyMvTee+8F/LiABaKLkKioqAj1EoCQILoIijlz5ig/P1/Tp09XcnKy1q1bpy5duujzzz/XoEGD9OKLL0qSNm3apJEjR6pPnz6aMmWKLly4IElyzmnJkiXq37+/evXqpbFjx+rEiRPauHGjvvzyS61fv17JycmaPn2675y//vqrRo0apT59+mjevHkqKyuTJB08eFBPPPGE1qxZo379+ik1NVVbt271/bk9e/Zo1KhRSk5O1sCBA7V+/XrDrxTuOXf5FpTAPxo8eLDbt2+fc865vLw8l5SU5ObMmeM8Ho/7+++/3Y4dO1xaWpo7deqUu3HjhsvMzHTp6enOOef27t3rnnnmGffXX385r9frTp065S5fvuycc27u3LluxYoVNc41evRol5+f74qKilx6errvcw4cOOC6du3qlixZ4srKytzBgwddjx49XE5OjnPOuccff9z35tTFxcUuOzvb5OuDexNPujA1c+ZMxcbGqnHjxsrKytK0adPUuXNnRUdHa/r06Tp+/LguXLig6OhoeTwe5ebmyjmnzp07q2XLlrUee8KECWrdurXi4+M1Y8aMGu//8NprrykmJkZ9+/bVk08+qW+++UaSFB0drVOnTqm0tFQPPPCAHnnkkaDNDxBdmGrVqpXv3/Pz87VkyRL17t1bvXv3Vt++fX1v4dm/f39NmDBBb731lvr376/58+f/43vU3vp2gm3atNGVK1d8Hzdr1kyxsbF33P/hhx9qz549Gjx4sCZOnKijR48GalygBqILU1XvUiXdjOTChQt1+PBh3z+//PKLevXqJUl64YUXtHnzZn399dc6c+aMPvnkkxrHuNXFixd9/56fn1/tyfjq1au6du1atc+t2v/oo49q9erV2r9/v9LS0jRr1qzADQzchugiaFq0aKG8vDy/+8ePH6+1a9fq5MmTkqSSkhLfX/l/+eUXHTt2TDdu3FCTJk0UExPje6P35s2b6/z58zWO99lnn+nSpUsqLi7WmjVrNGrUqGr7P/roI5WXl+vw4cPavXu3RowYofLycm3dulUlJSVq1KiR4uLifOcBgqFe/eYINCzTpk3T4sWLtXz5cs2YMaPG/qFDh8rj8ej111/XhQsX1LRpUz322GMaOXKkPB6PlixZovPnzysmJkYDBgzQlClTJEnPPvus7/eQ9e3bV6tWrZIkjRkzRpMnT9aVK1c0ZMiQauds0aKFmjVrpoEDB6pJkyZ688031blzZ5WXl+uLL77QokWLVFlZqY4dO2r58uU2XyDck3g/XTR4Bw8e1Jw5c7R3795QLwXg5QUAsER0AcAQLy8AgCGedAHAENEFAENEFwAMEV0AMER0AcAQ0QUAQ/8PRRxo5Dwf+14AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRtiGpMWQi8c"
      },
      "source": [
        "As observed from the above data, there are few data points that lie beyond the upper limit and hence are outliers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "--Hb9xxxDr3e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "e22c3941-c714-4026-a665-409b9d2881d3"
      },
      "source": [
        "# Plotting the box plot for thalach\n",
        "sns.set(style=\"whitegrid\")\n",
        "ax = sns.boxplot(x=df[\"thalach\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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HO/R7imLFi1S79699cILL8R7lP/pwIEDqqmp0fPPPx/vUf6zQCCghoYGPfLII1q3bp3eeecdvfbaa7p06VK8R4so3Oe0ra0t3qOF5YU17ckr3draWp0/f14+n0+S5PP51KtXL/Xs2VN///23AoGAUlJSFAgEdP78eeXk5MR54pvl5OSEndM5lxDvYenSpTp58qRWrlwZelJSTk6Ozpw5E9qnqalJycnJnrharK6uVl1dnSZMmCBJOnfunGbOnKnFixd7em7p2vc1NTVVU6dOlSQ99thjysrK0vHjxzVgwADPrpdwn9O6ujoNHDjQc3PfuqYjrYtYrhlPXun2799f586dU319vSSprq5OjY2NeuihhzR06FBt3LhRkrRx40YNHTo07j9m3eqBBx4IO2ekbV7x2WefqaamRhUVFerRo0fo68OHD9fVq1e1d+9eSVJlZaUmT54crzFvMnv2bP3666+qqqpSVVWV+vfvr++++05jxozx9NzStR9dR48erZ07d0q69lv/6+vdy+sl3Od08ODBnpu7qzUdaV3Ecs149tGO33//vVatWhV6lu/rr7+u4uJi1dXVqby8XBcvXtR9992npUuXKjc3N25zfvTRR9qyZYsuXLigrKwsZWZmatOmTRHn9Mp76Gr2ZcuWaerUqXr44YeVnp4uSRo0aJAqKiokSfv379fChQvV3t6ugQMH6pNPPlHfvn3jPvemTZtu2qeoqEgrV65UXl6eZ+aONHtDQ4Pee+89tbS0KDU1VXPnztXYsWMleWO9hJs73OfUK3NL0rFjx8Ku6UjrIlZrxrPRBYC7kSdvLwDA3YroAoAhogsAhoguABgiugBgiOjC1OnTp5Wfny+/39+t1+fn5+vkyZN3NEN5ebk+//zzOzoG0F1EFzFXVFSkXbt2xXsMwBOILgAYIrqIqXfffVdnzpzRyy+/rBEjRujHH3+UJG3YsEHjxo3T6NGjtWLFitD+hw4dUmlpqQoLCzVmzBh9+OGH6ujo6PLYO3bs0PTp0zVy5EiNHTtWX3311U3b9+7dq7KyMhUWFmrs2LFat25daNvFixc1e/ZsjRgxQs8++6xOnToVg3cPdCEqD4gEIhg/frzbuXOnc865hoYGl5eX595//3135coVV1tb64YNG+b++usv55xzf/zxhztw4IDr7Ox0DQ0NbvLkyW716tWhY+Xl5bkTJ04455zbvXu3O3LkiAsEAq62ttY9/vjjbuvWrc45506fPu0KCgrchg0bXEdHh2tqanKHDx92zjk3b948N2rUKHfw4EHX2dnp3nrrLTd37lzD7wjuZVzpIi7mzJmj9PR0DRkyREOGDNGRI0ckXXvQSEFBgVJTUzVo0CCVlpaqurq6y2OMHj1a+fn5Sk5O1pAhQzRlyhTt2bNH0rUHrDzxxBOaOnWq0tLSlJWVpaFDh4ZeW1xcrEcffVSpqakqKSlRbW1t7N80II8+2hF3vxsfHNKrV6/Qs5KPHz+uJUuWqKamRleuXFEgENCwYcO6PMbBgwf16aef6tixY+rs7FRHR0foSVBnz57V4MGDb+v86enpPKsZZrjShad88MEHys3N1ebNm7V//369+eabcmGeyfT2229rwoQJ+uWXX7Rv3z6VlZWF9s3JyeE+LTyJ6CLm+vbtq4aGhtvat62tTRkZGcrIyFBdXZ3WrFkTcd/7779fPXv21KFDh0LPbpWkadOmadeuXfrhhx/k9/vV3NzMLQR4AtFFzM2ePVsrVqxQYWGhNm/eHHHfefPmaePGjRo5cqQWLFigp59+Ouy+Cxcu1JdffqkRI0aooqJCTz31VGjbgAEDtGrVKq1evVqjRo3S9OnTQ/eNgXjieboAYIgrXQAwRHQBwBDRBQBDRBcADBFdADBEdAHAENEFAENEFwAMEV0AMPR/HDVfRCo+N4kAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VrU5qPepQ2g1"
      },
      "source": [
        "As observed from the above data, there is one data point that lies beyond the lower limit and hence is an outlier\n"
      ]
    }
  ]
}